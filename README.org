#+TITLE: Dependency Packer Webpack Plugin

[[https://travis-ci.com/martinjlowm/dependency-packer-webpack-plugin][https://travis-ci.com/martinjlowm/dependency-packer-webpack-plugin.svg?branch=master]]

A Webpack plugin that automatically packs dependencies for entry points
individually for Node projects.

This does a similar job to
[[https://www.npmjs.com/package/serverless-webpack][Serverless Webpack]], but
instead of solely inspecting the project's =package.json= (and being dependent
on the Serverless project) - this plugin utilizes the Webpack compiler's module
hooks to determine exactly what dependencies are required.

This works perfectly with [[https://www.npmjs.com/package/aws-cdk][aws-cdk]]
(and presumably similar projects), enabling direct asset references to the
bundle:

#+BEGIN_SRC javascript
  const fun = new lambda.Function(this, 'lambdaFunction', {
    functionName: 'lambdaFunction',
    runtime: lambda.Runtime.NodeJS810,
    handler: 'fun.handler',                  // <-
    code: lambda.Code.asset('.webpack/fun'), // <-
  });
#+END_SRC


* Usage

First, install the plugin: ~[npm/yarn] install
dependency-packer-webpack-plugin~, then reference and add it to your Webpack
config:

#+BEGIN_SRC javascript
  const DependencyPackerPlugin = require('dependency-packer-webpack-plugin').DependencyPackerPlugin;

  module.exports = {
    ...
    output: {
      filename: '[name]/[name].js', // Required for multiple entry points
    }
    ...
    plugins: [
      new DependencyPackerPlugin({
        blacklist: [/aws-sdk/], // Optional
        packageManager: 'npm'   // Optional
      }),
    ],
  };
#+END_SRC

For multiple entry points, each bundle must be output to its own directory to
avoid conflicts during installation of dependencies. To do so, also include the
=config.output.filename= in the example above.

* Development

Use NPM/Yarn links to easily integrate the plugin in your project to test
special cases that are not covered by the unit tests.

#+BEGIN_SRC bash
  [npm run/yarn] build
  [npm/yarn] link
  cd <project-that-uses-this-plugin>
  [npm/yarn] link dependency-packer-webpack-plugin
#+END_SRC

For convenience, the TypeScript config adds specific path prefixes to indicate
relative paths of the =src=, =dist= and =test= directories:

- =@=: src/
- =#=: dist/
- =$=: test/
